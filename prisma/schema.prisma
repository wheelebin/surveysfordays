// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator dbml {
    provider = "prisma-dbml-generator"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    surveys       Survey[]
    Submission    Submission[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Survey {
    id          String     @id @default(cuid())
    name        String
    title       String
    description String
    createdAt   DateTime   @default(now())
    user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
    Question    Question[]

    parentId   String?      @unique
    status     SurveyStatus @default(DRAFT)
    Submission Submission[]
}

model Question {
    id              String           @id @default(cuid())
    type            String
    survey          Survey           @relation(fields: [surveyId], references: [id], onDelete: Cascade)
    surveyId        String
    text            String
    supportText     String?
    orderNumber     Int
    questionOptions QuestionOption[]
    createdAt       DateTime         @default(now())

    parentId String?      @unique
    status   SurveyStatus @default(DRAFT)

    Answer Answer[]
}

model QuestionOption {
    id          String   @id @default(cuid())
    question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    questionId  String
    type        String // RADIO, RADIOTEXT, TEXT, NUMBER, DATE, TIME, CHECKBOX
    label       String
    placeholder String?
    supportText String?
    value       String   @default(cuid())
    orderNumber Int
    createdAt   DateTime @default(now())

    parentId              String?                 @unique
    status                SurveyStatus            @default(DRAFT)
    Answer_QuestionOption Answer_QuestionOption[]
}

model Submission {
    id       String   @id @default(cuid())
    surveyId String
    survey   Survey   @relation(fields: [surveyId], references: [id], onDelete: Cascade)
    userId   String?
    user     User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
    Answer   Answer[]
}

model Answer {
    id           String     @id @default(cuid())
    submissionId String
    submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

    text       String?
    questionId String
    question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

    createdAt             DateTime                @default(now())
    Answer_QuestionOption Answer_QuestionOption[]
}

model Answer_QuestionOption {
    answerId String
    answer   Answer @relation(fields: [answerId], references: [id], onDelete: Cascade)

    questionOptionId String
    questionOption   QuestionOption @relation(fields: [questionOptionId], references: [id], onDelete: Cascade)

    @@id([answerId, questionOptionId])
}

enum SurveyStatus {
    DRAFT
    PUBLISH
}
