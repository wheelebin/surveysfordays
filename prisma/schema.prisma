// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Survey        Survey[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// TODO Add draft status to survey
model Survey {
    id          String     @id @default(cuid())
    name        String
    title       String
    description String
    createdAt   DateTime   @default(now())
    startsAt    DateTime
    endsAt      DateTime
    user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
    Question    Question[]
}

// model Section {
//     id            String     @id @default(cuid())
//     surveyId      String
//     sectionNumber Int
//     questions     Question[]
//     createdAt     DateTime   @default(now())
// }

model Text {
    id        String   @id @default(cuid())
    sectionId String
    text      String
    createdAt DateTime @default(now())
}

model Image {
    id        String   @id @default(cuid())
    sectionId String
    url       String
    createdAt DateTime @default(now())
}

// TODO Add supporting text to bellow
// TODO Reconcider the naming of bellow tables
// Question could be Content and QuestionOptions could be InputElement (examples)
model Question {
    id              String           @id @default(cuid())
    type            String
    survey          Survey           @relation(fields: [surveyId], references: [id], onDelete: Cascade)
    surveyId        String
    text            String
    supportText     String?
    orderNumber     Int
    questionOptions QuestionOption[]
    createdAt       DateTime         @default(now())
}

model QuestionOption {
    id          String   @id @default(cuid())
    question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    questionId  String
    type        String // RADIO, RADIOTEXT, TEXT, NUMBER, DATE, TIME, CHECKBOX
    label       String
    placeholder String?
    supportText String?
    value       String   @default(cuid())
    orderNumber Int
    createdAt   DateTime @default(now())
}

model Answer {
    questionId       String
    questionOptionId String
    userId           String
    text             String?
    createdAt        DateTime @default(now())

    @@unique([questionId, questionOptionId, userId])
}
